<!DOCTYPE html>
<%- include('load/head') %>
<body>
    <%- include('load/nav') %>
    <main class="main-container">
        <%- include('load/side-bar') %>
        <div class="content">
            <div class="content-header">
                <h3 class="content-header-title">Categorias</h3>
            </div>                 
            <div class="categorias-container" id="categorias">
                <!-- Las categorías se agregarán aquí dinámicamente -->
            </div>

            <div class="producto-container" id="productos" style="display: none;">
                <!-- Las cards de productos se agregarán aquí dinámicamente -->
            </div>
        </div>

        <button class="btn btn-dark btn-content btn-categoria" data-bs-toggle="modal" data-bs-target="#categoriaModal" title="Agregar Categoría">
            <span>
                <i class="bi bi-box-seam"></i>
            </span>
        </button>

        <button class="btn btn-primary btn-content btn-producto" id="btnAgregarProducto" data-bs-toggle="modal" data-bs-target="#productoModal" style="display: none;" title="Agregar Producto">
            <span>
                <i class="bi bi-basket"></i>
            </span>
        </button>
    </main>

    <!-- Modal para añadir categoría -->
    <div class="modal fade" id="categoriaModal" tabindex="-1" aria-labelledby="categoriaModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="categoriaModalLabel">Añadir Categoría</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="categoriaForm">
                        <div class="mb-3">
                            <label for="nombreCategoria" class="form-label">Nombre de la categoría</label>
                            <input type="text" class="form-control" id="nombreCategoria" required>
                        </div>
                        <button type="submit" class="btn btn-primary">Guardar</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para añadir producto -->
    <div class="modal fade" id="productoModal" tabindex="-1" aria-labelledby="productoModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productoModalLabel">Añadir Producto</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="productoForm">
                        <input type="hidden" id="productoId">
                        <input type="hidden" id="productoCategoriaId">
                        <div class="mb-3">
                            <label for="categoriaProducto" class="form-label">Categoría</label>
                            <select class="form-select" id="categoriaProducto" required>
                                <option value="" selected disabled>Seleccione una categoría</option>
                                <!-- Las opciones se llenarán dinámicamente -->
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="nombreProducto" class="form-label">Nombre del producto</label>
                            <input type="text" class="form-control" id="nombreProducto" required>
                        </div>
                        <div class="mb-3">
                            <label for="precioProducto" class="form-label">Precio</label>
                            <input type="number" class="form-control" id="precioProducto" min="0" step="0.01" required>
                        </div>
                        <div class="mb-3">
                            <label for="imagenProducto" class="form-label">Imagen del producto</label>
                            <input type="file" class="form-control" id="imagenProducto" accept="image/*" required>
                        </div>
                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-danger" id="btnEliminarProducto" style="display: none;">Eliminar</button>
                            <button type="submit" class="btn btn-primary">Guardar</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para seleccionar cantidad -->
    <div class="modal fade" id="cantidadModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Seleccionar cantidad</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="quantity-selector">
                        <button class="btn btn-outline-secondary" id="decrementQuantity">-</button>
                        <input type="number" id="productQuantity" value="1" min="1" class="form-control text-center">
                        <button class="btn btn-outline-secondary" id="incrementQuantity">+</button>
                    </div>
                    <button id="confirmAddToSidebar" class="btn btn-primary mt-3">Agregar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>
</html>

<style>
    body {
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: column;
        font-family: 'Rubik', Arial, sans-serif;
        background: #181A20;
        color: #EAEAEA;
    }
    .main-container {
        display: flex;
        height: calc(100vh - 60px);
        background: #181A20;
    }
    .content {
        flex-grow: 1;
        padding: 20px;
        overflow-y: auto;
        background: #23272F;
        box-shadow: 0 4px 32px rgba(0,0,0,0.25);
    }
    .categorias-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-top: 20px;
    }
    .producto-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-top: 20px;
    }
    .btn-content {
        position: fixed;
        bottom: 30px;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        font-size: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        border: none;
    }
    .btn-categoria {
        left: 17px;
        bottom: 17px;
        background: #23272F;
        color: #00DFA2;
        transition: background 0.2s, color 0.2s;
    }
    .btn-categoria:hover {
        background: #00DFA2;
        color: #23272F;
    }
    .btn-producto {
        left: 80px;
        bottom: 17px;
        background: #23272F;
        color: #00A9FF;
        transition: background 0.2s, color 0.2s;
    }
    .btn-producto:hover {
        background: #00A9FF;
        color: #23272F;
    }
    .card {
        margin: 10px;
        border: 1px solid #23272F;
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(0,0,0,0.18);
        background: #23272F;
        transition: transform 0.2s, box-shadow 0.2s;
        width: 18rem;
        cursor: pointer;
        display: inline-block;
    }
    .card:hover {
        transform: translateY(-5px) scale(1.03);
        box-shadow: 0 6px 24px rgba(0,0,0,0.25);
    }
    .card-img-top {
        height: 180px;
        object-fit: cover;
        border-top-left-radius: 12px;
        border-top-right-radius: 12px;
        background: #181A20;
    }
    .card-body {
        padding: 15px;
    }
    .card-title {
        font-size: 1.2rem;
        margin-bottom: 10px;
        color: #EAEAEA;
        font-weight: 600;
    }
    .card-text {
        color: #B0B3B8;
        font-size: 1rem;
    }
    .btn-danger, .btn-eliminar {
        background-color: #FF4C60 !important;
        color: #fff !important;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
        margin-right: 5px;
        transition: background 0.2s;
    }
    .btn-danger:hover, .btn-eliminar:hover {
        background-color: #D7263D !important;
    }
    .btn-success, .add-to-sidebar {
        background-color: #00DFA2 !important;
        color: #181A20 !important;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
        transition: background 0.2s;
    }
    .btn-success:hover, .add-to-sidebar:hover {
        background-color: #00A97F !important;
        color: #fff !important;
    }
    .card-buttons {
        display: flex;
        justify-content: space-between;
    }
    .quantity-selector {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }
    .quantity-selector input {
        max-width: 70px;
        background: #23272F;
        color: #EAEAEA;
        border: 1px solid #393E46;
    }
    .categoria-card {
        width: 200px;
        height: 120px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #23272F;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.13);
        transition: all 0.3s ease;
        cursor: pointer;
        border: 1.5px solid #393E46;
    }
    .categoria-card:hover {
        transform: translateY(-5px) scale(1.04);
        box-shadow: 0 5px 20px rgba(0,0,0,0.18);
        border-color: #00DFA2;
    }
    .categoria-card h3 {
        margin: 0;
        color: #00DFA2;
        font-weight: 600;
    }
    .back-button {
        margin-bottom: 20px;
        cursor: pointer;
        color: #00A9FF;
        display: inline-flex;
        align-items: center;
        font-weight: 500;
    }
    .back-button:hover {
        text-decoration: underline;
        color: #00DFA2;
    }
    .content-header {
        margin-bottom: 25px;
    }
    .content-header-title {
        font-family: "Rubik", sans-serif;
        font-size: 24px;
        font-weight: bold;
        color: #EAEAEA;    
    }
    .modal-backdrop {
        display: none;
    }
    /* Modales */
    .modal-content {
        background: #23272F;
        color: #EAEAEA;
        border-radius: 12px;
        border: 1px solid #393E46;
    }
    .modal-header, .modal-footer {
        border: none;
    }
    .form-control, .form-select {
        background: #181A20;
        color: #EAEAEA;
        border: 1px solid #393E46;
    }
    .form-control:focus, .form-select:focus {
        background: #23272F;
        color: #fff;
        border-color: #00DFA2;
        box-shadow: none;
    }
    .btn-close {
        filter: invert(1);
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", () => {
    // Elementos principales
    const categoriaForm = document.getElementById("categoriaForm");
    const productoForm = document.getElementById("productoForm");
    const categoriasContainer = document.getElementById("categorias");
    const productoContainer = document.getElementById("productos");
    const cantidadModal = new bootstrap.Modal(document.getElementById('cantidadModal'));
    const btnAgregarProducto = document.getElementById("btnAgregarProducto");
    const categoriaProductoSelect = document.getElementById("categoriaProducto");
    
    // Elementos para cantidad
    const productQuantityInput = document.getElementById("productQuantity");
    const decrementQuantityBtn = document.getElementById("decrementQuantity");
    const incrementQuantityBtn = document.getElementById("incrementQuantity");
    const confirmAddToSidebarBtn = document.getElementById("confirmAddToSidebar");
    
    // Variables de estado
    let currentProduct = null;
    let currentQuantity = 1;
    let currentCategory = null;

    // Sistema de actualización dinámica
    function actualizarSidebar() {
        const event = new CustomEvent('actualizarSidebar');
        document.dispatchEvent(event);
    }

    // Evento para agregar categoría (id generado del nombre normalizado)
    categoriaForm.addEventListener("submit", (event) => {
        event.preventDefault();
        const nombre = document.getElementById("nombreCategoria").value.trim();

        if (!nombre) {
            Swal.fire({
                title: 'Error',
                text: 'Por favor ingresa un nombre para la categoría',
                icon: 'error',
                confirmButtonText: 'Entendido'
            });
            return;
        }

        // id de la categoría: nombre normalizado (minúsculas y guiones)
        const categoriaId = nombre.toLowerCase().replace(/\s+/g, '-');

        // Control de unicidad de categoría
        let categorias = JSON.parse(localStorage.getItem('categorias')) || [];
        const categoriaExistente = categorias.find(c => c.id === categoriaId);
        if (categoriaExistente) {
            Swal.fire({
                title: 'Nombre ocupado',
                text: 'Ya existe una categoría con ese nombre. Por favor elige otro.',
                icon: 'warning',
                confirmButtonText: 'Entendido'
            });
            return;
        }

        const categoria = { id: categoriaId, nombre: nombre };

        guardarCategoria(categoria);
        crearCardCategoria(categoria);
        categoriaForm.reset();
        new bootstrap.Modal(document.getElementById('categoriaModal')).hide();

        Swal.fire({
            title: '¡Éxito!',
            text: 'Categoría agregada correctamente',
            icon: 'success',
            confirmButtonText: 'Aceptar',
            timer: 1500,
            timerProgressBar: true
        });
    });

    // Evento para agregar producto (id generado del nombre normalizado)
    productoForm.addEventListener("submit", async (event) => {
        event.preventDefault();
        const categoriaId = document.getElementById("categoriaProducto").value;
        const nombre = document.getElementById("nombreProducto").value.trim();
        const precio = parseFloat(document.getElementById("precioProducto").value);
        const imagenInput = document.getElementById("imagenProducto");

        // Validaciones
        if (!nombre) {
            Swal.fire({
                title: 'Error',
                text: 'Por favor ingresa un nombre para el producto',
                icon: 'error',
                confirmButtonText: 'Entendido'
            });
            return;
        }

        if (isNaN(precio) || precio <= 0) {
            Swal.fire({
                title: 'Error',
                text: 'Por favor ingresa un precio válido',
                icon: 'error',
                confirmButtonText: 'Entendido'
            });
            return;
        }

        // id del producto: nombre normalizado (minúsculas y guiones)
        const productoId = nombre.toLowerCase().replace(/\s+/g, '-');

        // Control de unicidad de producto
        let productos = JSON.parse(localStorage.getItem('productos')) || [];
        const productoExistente = productos.find(p => p.id === productoId);
        if (productoExistente) {
            Swal.fire({
                title: 'Nombre ocupado',
                text: 'Ya existe un producto con ese nombre. Por favor elige otro.',
                icon: 'warning',
                confirmButtonText: 'Entendido'
            });
            return;
        }

        // Convertir imagen a base64 si hay archivo seleccionado
        let imagenURL = "https://via.placeholder.com/150";
        if (imagenInput.files && imagenInput.files[0]) {
            imagenURL = await fileToBase64(imagenInput.files[0]);
        }

        const producto = {
            id: productoId,
            categoriaId: categoriaId,
            nombre: nombre,
            precio: precio,
            imagenURL: imagenURL // Guardar la imagen
        };

        guardarProducto(producto);
        crearCardProducto(producto);
        productoForm.reset();
        new bootstrap.Modal(document.getElementById('productoModal')).hide();

        Swal.fire({
            title: '¡Éxito!',
            text: 'Producto agregado correctamente',
            icon: 'success',
            confirmButtonText: 'Aceptar',
            timer: 1500,
            timerProgressBar: true
        });
    });

    // Función para convertir archivo a base64
    function fileToBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = reject;
            reader.readAsDataURL(file);
        });
    }

    // Eventos para cantidad
    decrementQuantityBtn.addEventListener("click", () => {
        if (currentQuantity > 1) currentQuantity--;
        productQuantityInput.value = currentQuantity;
    });
    
    incrementQuantityBtn.addEventListener("click", () => {
        currentQuantity++;
        productQuantityInput.value = currentQuantity;
    });
    
    productQuantityInput.addEventListener("change", (e) => {
        currentQuantity = Math.max(1, parseInt(e.target.value) || 1);
        productQuantityInput.value = currentQuantity;
    });
    
    confirmAddToSidebarBtn.addEventListener("click", () => {
        cantidadModal.hide();
        if (currentProduct) {
            agregarProductoASidebar(currentProduct, currentQuantity);
            currentProduct = null;
            currentQuantity = 1;
            productQuantityInput.value = 1;
            
            Swal.fire({
                position: 'top-end',
                icon: 'success',
                title: 'Producto agregado al carrito',
                showConfirmButton: false,
                timer: 1500,
                toast: true
            });
        }
    });

    // Funciones principales
    function guardarCategoria(categoria) {
        let categorias = JSON.parse(localStorage.getItem('categorias')) || [];
        categorias.push(categoria);
        localStorage.setItem('categorias', JSON.stringify(categorias));
        actualizarSelectCategorias();
    }

    function guardarProducto(producto) {
        let productos = JSON.parse(localStorage.getItem('productos')) || [];
        productos.push(producto);
        localStorage.setItem('productos', JSON.stringify(productos));
    }

    function cargarCategorias() {
        const categorias = JSON.parse(localStorage.getItem('categorias')) || [];
        categorias.forEach(crearCardCategoria);
        actualizarSelectCategorias();
    }

    function cargarProductos(categoriaId) {
        const productos = JSON.parse(localStorage.getItem('productos')) || [];
        productoContainer.innerHTML = '';
        productos
            .filter(p => p.categoriaId == categoriaId)
            .forEach(producto => {
                crearCardProducto(producto);
            });
    }

    function actualizarSelectCategorias() {
        const categorias = JSON.parse(localStorage.getItem('categorias')) || [];
        categoriaProductoSelect.innerHTML = '<option value="" selected disabled>Seleccione una categoría</option>';
        categorias.forEach(categoria => {
            const option = document.createElement('option');
            option.value = categoria.id;
            option.textContent = categoria.nombre;
            categoriaProductoSelect.appendChild(option);
        });
    }

    function crearCardCategoria(categoria) {
        const card = document.createElement("div");
        card.classList.add("categoria-card");
        card.id = `categoria-${categoria.id}`;
        card.dataset.id = categoria.id;
        card.innerHTML = `
            <h3>${categoria.nombre} <i class="bi bi-box-seam"></i></h3>
        `;
        
        card.addEventListener('click', () => {
            currentCategory = categoria;
            categoriasContainer.style.display = 'none';
            productoContainer.style.display = 'flex';
            btnAgregarProducto.style.display = 'flex';

            // Elimina el back button anterior si existe
            const oldBackButton = document.querySelector('.back-button');
            if (oldBackButton) oldBackButton.remove();

            const backButton = document.createElement('div');
            backButton.classList.add('back-button');
            backButton.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16" style="margin-right: 5px;">
                    <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8"/>
                </svg>
                Volver a categorías
            `;
            backButton.addEventListener('click', (e) => {
                e.stopPropagation();
                volverACategorias();
            });
            productoContainer.parentNode.insertBefore(backButton, productoContainer);

            // LIMPIA el contenedor y carga los productos de la categoría seleccionada
            cargarProductos(categoria.id);
        });
        
        // Agregar evento de clic derecho para eliminar
        card.addEventListener('contextmenu', (e) => {
            e.preventDefault();
            eliminarCategoria(categoria.id, card);
        });
        
        categoriasContainer.appendChild(card);
    }

    function volverACategorias() {
        currentCategory = null;
        document.querySelector('.back-button').remove();
        categoriasContainer.style.display = 'flex';
        productoContainer.style.display = 'none';
        btnAgregarProducto.style.display = 'none';
    }

    // crearCardProducto: elimina la imagen de la card
    function crearCardProducto(producto) {
        const card = document.createElement("div");
        card.classList.add("card");
        card.id = `producto-${producto.id}`;
        card.dataset.id = producto.id;

        const precio = typeof producto.precio === 'string' ? 
                    parseFloat(producto.precio) : 
                    producto.precio;

        const imagenHTML = producto.imagenURL
            ? `<img src="${producto.imagenURL}" class="card-img-top" alt="${producto.nombre}">`
            : `<img src="https://via.placeholder.com/150" class="card-img-top" alt="Sin imagen">`;

        // Usa id únicos para los botones y clases Bootstrap
        card.innerHTML = `
            ${imagenHTML}
            <div class="card-body">
                <h5 class="card-title">${producto.nombre}</h5>
                <p class="card-text">Precio: $${precio.toFixed(2)}</p>
                <div class="card-buttons d-flex justify-content-between">
                    <button id="btn-eliminar-${producto.id}" class="btn btn-danger btn-sm" data-id="${producto.id}">Eliminar</button>
                    <button id="btn-agregar-${producto.id}" class="btn btn-success btn-sm" data-id="${producto.id}">Agregar</button>
                </div>
            </div>
        `;

        // Ahora selecciona por id
        card.querySelector(`#btn-eliminar-${producto.id}`).addEventListener('click', (e) => {
            e.stopPropagation();
            eliminarProducto(producto.id, card);
        });

        card.querySelector(`#btn-agregar-${producto.id}`).addEventListener('click', (e) => {
            e.stopPropagation();
            currentProduct = { ...producto, precio: parseFloat(producto.precio) };
            currentQuantity = 1;
            productQuantityInput.value = 1;
            cantidadModal.show();
        });

        productoContainer.appendChild(card);
    }

    function eliminarCategoria(id, cardElement) {
        Swal.fire({
            title: '¿Eliminar categoría?',
            text: "Esta acción eliminará la categoría y todos sus productos. ¿Deseas continuar?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Sí, eliminar',
            cancelButtonText: 'Cancelar',
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                let categorias = JSON.parse(localStorage.getItem('categorias')) || [];
                categorias = categorias.filter(c => c.id !== id);
                localStorage.setItem('categorias', JSON.stringify(categorias));
                
                let productos = JSON.parse(localStorage.getItem('productos')) || [];
                productos = productos.filter(p => p.categoriaId !== id);
                localStorage.setItem('productos', JSON.stringify(productos));
                
                cardElement.remove();
                actualizarSelectCategorias();
                eliminarProductosDeSidebarPorCategoria(id);
                
                Swal.fire({
                    title: '¡Eliminada!',
                    text: 'La categoría y sus productos han sido eliminados.',
                    icon: 'success',
                    timer: 1500,
                    timerProgressBar: true
                });
            }
        });
    }

    function eliminarProducto(id, cardElement) {
        Swal.fire({
            title: '¿Eliminar producto?',
            text: "Esta acción no se puede deshacer",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Sí, eliminar',
            cancelButtonText: 'Cancelar',
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                let productos = JSON.parse(localStorage.getItem('productos')) || [];
                productos = productos.filter(p => p.id !== id);
                localStorage.setItem('productos', JSON.stringify(productos));
                cardElement.remove();
                eliminarProductoDeSidebar(id);
                
                Swal.fire({
                    title: '¡Eliminado!',
                    text: 'El producto ha sido eliminado.',
                    icon: 'success',
                    timer: 1500,
                    timerProgressBar: true
                });
            }
        });
    }

    function agregarProductoASidebar(producto, cantidad) {
        let productosSeleccionados = JSON.parse(localStorage.getItem('productosSeleccionados')) || [];
        const index = productosSeleccionados.findIndex(item => item.producto.id === producto.id);
        
        if (index >= 0) {
            productosSeleccionados[index].cantidad += cantidad;
        } else {
            productosSeleccionados.push({ producto: producto, cantidad: cantidad });
        }
        
        localStorage.setItem('productosSeleccionados', JSON.stringify(productosSeleccionados));
        actualizarSidebar();
    }

    function eliminarProductoDeSidebar(id) {
        let productosSeleccionados = JSON.parse(localStorage.getItem('productosSeleccionados')) || [];
        productosSeleccionados = productosSeleccionados.filter(item => item.producto.id !== id);
        localStorage.setItem('productosSeleccionados', JSON.stringify(productosSeleccionados));
        actualizarSidebar();
    }

    function eliminarProductosDeSidebarPorCategoria(categoriaId) {
        let productosSeleccionados = JSON.parse(localStorage.getItem('productosSeleccionados')) || [];
        productosSeleccionados = productosSeleccionados.filter(item => item.producto.categoriaId !== categoriaId);
        localStorage.setItem('productosSeleccionados', JSON.stringify(productosSeleccionados));
        actualizarSidebar();
    }

    // Inicialización
    cargarCategorias();
});
</script>
