<div class="sidebar">
    <h4 class="text-center">Productos Seleccionados <svg xmlns="http://www.w3.org/2000/svg" width="35" height="35" fill="currentColor" class="bi bi-cart-check" viewBox="0 0 16 16">
        <path d="M11.354 6.354a.5.5 0 0 0-.708-.708L8 8.293 6.854 7.146a.5.5 0 1 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0z"/>
        <path d="M.5 1a.5.5 0 0 0 0 1h1.11l.401 1.607 1.498 7.985A.5.5 0 0 0 4 12h1a2 2 0 1 0 0 4 2 2 0 0 0 0-4h7a2 2 0 1 0 0 4 2 2 0 0 0 0-4h1a.5.5 0 0 0 .491-.408l1.5-8A.5.5 0 0 0 14.5 3H2.89l-.405-1.621A.5.5 0 0 0 2 1zm3.915 10L3.102 4h10.796l-1.313 7zM6 14a1 1 0 1 1-2 0 1 1 0 0 1 2 0m7 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0"/>
      </svg></h4>
    <hr>
    <div class="table-responsive">
        <table class="table table-dark table-hover" id="selectedProductsTable">
            <thead>
                <tr>
                    <th>Producto</th>
                    <th>Precio</th>
                    <th>Cantidad</th>
                    <th>Subtotal</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody id="selectedProducts">
                <!-- Los productos seleccionados aparecerán aquí -->
            </tbody>
        </table>
    </div>
    <div class="sidebar-footer">
        <hr>
        <div class="total-section">
            <h5>Total: $<span id="totalAmount">0.00</span></h5>
            <button id="finalizarVentaBtn" class="btn btn-success w-100 mt-2" disabled>Finalizar Venta</button>
        </div>
    </div>
</div>

<!-- Modal de confirmación de venta -->
<div class="modal fade" id="ventaModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmar Venta</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Total a cobrar:</label>
                    <input type="text" class="form-control" id="totalCobrar" readonly>
                </div>
                
                <!-- Campo para nombre del cliente -->
                <div class="mb-3">
                    <label for="nombreCliente" class="form-label">Nombre del Cliente:</label>
                    <input type="text" class="form-control" id="nombreCliente" placeholder="Opcional">
                </div>
                
                <!-- Select para tipo de pago -->
                <div class="mb-3">
                    <label for="tipoPago" class="form-label">Tipo de Pago:</label>
                    <select class="form-select" id="tipoPago" required>
                        <option value="" selected disabled>Seleccione tipo de pago...</option>
                        <option value="Efectivo">Efectivo</option>
                        <option value="Tarjeta Débito">Tarjeta Débito</option>
                        <option value="Tarjeta Crédito">Tarjeta Crédito</option>
                        <option value="Transferencia">Transferencia</option>
                        <option value="Otro">Otro</option>
                    </select>
                </div>
                
                <!-- Select para plataforma -->
                <div class="mb-3">
                    <label for="plataformaPago" class="form-label">Plataforma:</label>
                    <select class="form-select" id="plataformaPago">
                        <option value="" selected>Ninguna (para ventas locales)</option>
                        <option value="Uber">Uber</option>
                        <option value="Didi">Didi</option>
                        <option value="Rappi">Rappi</option>
                        <option value="Otro">Otra plataforma</option>
                    </select>
                </div>
                <div class="mb-3" id="otraPlataformaContainer" style="display: none;">
                    <label for="otraPlataforma" class="form-label">Especifique plataforma:</label>
                    <input type="text" class="form-control" id="otraPlataforma">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="confirmarVentaBtn">Registrar Venta</button>
            </div>
        </div>
    </div>
</div>

<style>
.sidebar {
    width: 350px;
    background: #2c3e50;
    color: white;
    padding: 15px;
    height: 100vh;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    position: fixed;
    right: 0;
    top: 0;
    z-index: 1000;
}

.table-responsive {
    flex-grow: 1;
    overflow-y: auto;
    margin: 15px 0;
}

.table {
    color: white;
    margin-bottom: 0;
}

.table th {
    border-top: none;
    font-weight: 500;
    padding: 10px;
}

.table td {
    vertical-align: middle;
    padding: 10px;
}

.table-hover tbody tr:hover {
    background-color: #3d5166;
}

.quantity-controls {
    display: flex;
    align-items: center;
    gap: 5px;
}

.quantity-controls button {
    width: 25px;
    height: 25px;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
}

.btn-eliminar {
    background-color: #dc3545;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 4px;
    cursor: pointer;
}

.btn-eliminar:hover {
    background-color: #c82333;
}

.sidebar-footer {
    margin-top: auto;
}

.total-section {
    padding: 10px;
    background: #34495e;
    border-radius: 5px;
    text-align: right;
}

#finalizarVentaBtn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

/* Responsive para móviles */
@media (max-width: 767.98px) {
    .sidebar {
        width: 100%;
        height: auto;
        max-height: 50vh;
        bottom: 0;
        top: auto;
        left: 0;
        border-top: 2px solid #34495e;
    }
    
    .main-container {
        padding-bottom: 50vh;
    }
    
    .table th, .table td {
        padding: 8px;
        font-size: 0.9rem;
    }
}

/* Animación para nuevos productos */
@keyframes highlight {
    0% { background-color: rgba(40, 167, 69, 0.7); }
    100% { background-color: transparent; }
}

.new-product {
    animation: highlight 1s ease;
}
</style>

<script>
    // Función para actualizar todo el estado de la venta
    function actualizarEstadoVenta() {
        const productosSeleccionados = JSON.parse(localStorage.getItem('productosSeleccionados')) || [];
        document.getElementById("finalizarVentaBtn").disabled = productosSeleccionados.length === 0;
        actualizarSidebar();
        actualizarTotal();
    }

    // Función para actualizar el sidebar con los productos en formato tabla
    function actualizarSidebar() {
        const productosSeleccionados = JSON.parse(localStorage.getItem('productosSeleccionados')) || [];
        const selectedProductsContainer = document.getElementById("selectedProducts");
        
        if (selectedProductsContainer) {
            selectedProductsContainer.innerHTML = '';
            
            productosSeleccionados.forEach(item => {
                const row = document.createElement("tr");
                row.dataset.id = item.producto.id;
                row.innerHTML = `
                    <td>${item.producto.nombre}</td>
                    <td>$${item.producto.precio}</td>
                    <td>
                        <div class="quantity-controls">
                            <button class="btn btn-sm btn-outline-secondary decrement">-</button>
                            <span class="quantity-value">${item.cantidad}</span>
                            <button class="btn btn-sm btn-outline-secondary increment">+</button>
                        </div>
                    </td>
                    <td>$${(item.producto.precio * item.cantidad).toFixed(2)}</td>
                    <td><button class="btn-eliminar" data-id="${item.producto.id}">×</button></td>
                `;
                
                // Resaltar nueva fila
                row.classList.add('new-product');
                setTimeout(() => row.classList.remove('new-product'), 1000);
                
                selectedProductsContainer.appendChild(row);
                
                // Eventos para cambiar cantidad
                row.querySelector('.decrement').addEventListener('click', (e) => {
                    e.stopPropagation();
                    actualizarCantidadProducto(item.producto.id, -1);
                });
                
                row.querySelector('.increment').addEventListener('click', (e) => {
                    e.stopPropagation();
                    actualizarCantidadProducto(item.producto.id, 1);
                });
                
                // Evento para eliminar producto
                row.querySelector('.btn-eliminar').addEventListener('click', (e) => {
                    e.stopPropagation();
                    eliminarProductoDeSidebar(item.producto.id);
                });
            });
        }
    }

    // Función para actualizar el total
    function actualizarTotal() {
        const productosSeleccionados = JSON.parse(localStorage.getItem('productosSeleccionados')) || [];
        let total = 0;
        
        productosSeleccionados.forEach(item => {
            total += item.producto.precio * item.cantidad;
        });
        
        document.getElementById("totalAmount").textContent = total.toFixed(2);
    }

    // Función para actualizar cantidad de producto
    function actualizarCantidadProducto(productId, cambio) {
        let productosSeleccionados = JSON.parse(localStorage.getItem('productosSeleccionados')) || [];
        const itemIndex = productosSeleccionados.findIndex(item => item.producto.id === productId);
        
        if (itemIndex >= 0) {
            productosSeleccionados[itemIndex].cantidad += cambio;
            
            // Eliminar si la cantidad es cero o menos
            if (productosSeleccionados[itemIndex].cantidad <= 0) {
                productosSeleccionados.splice(itemIndex, 1);
            }
            
            localStorage.setItem('productosSeleccionados', JSON.stringify(productosSeleccionados));
            actualizarEstadoVenta();
        }
    }

    // Función para eliminar producto del sidebar
    function eliminarProductoDeSidebar(id) {
        if (confirm('¿Eliminar este producto de la venta?')) {
            let productosSeleccionados = JSON.parse(localStorage.getItem('productosSeleccionados')) || [];
            productosSeleccionados = productosSeleccionados.filter(item => item.producto.id !== id);
            localStorage.setItem('productosSeleccionados', JSON.stringify(productosSeleccionados));
            actualizarEstadoVenta();
        }
    }

    // Sistema de ventas
    document.addEventListener("DOMContentLoaded", () => {
        const finalizarVentaBtn = document.getElementById("finalizarVentaBtn");
        const ventaModal = new bootstrap.Modal(document.getElementById('ventaModal'));
        const totalCobrarInput = document.getElementById("totalCobrar");
        const nombreClienteInput = document.getElementById("nombreCliente");
        const tipoPagoSelect = document.getElementById("tipoPago");
        const plataformaPagoSelect = document.getElementById("plataformaPago");
        const otraPlataformaContainer = document.getElementById("otraPlataformaContainer");
        const otraPlataformaInput = document.getElementById("otraPlataforma");
        const confirmarVentaBtn = document.getElementById("confirmarVentaBtn");

        // Evento para mostrar plataforma "Otro"
        plataformaPagoSelect.addEventListener("change", (e) => {
            otraPlataformaContainer.style.display = e.target.value === "Otro" ? "block" : "none";
            if (e.target.value !== "Otro") {
                otraPlataformaInput.value = "";
            }
        });

        // Finalizar venta
        finalizarVentaBtn.addEventListener("click", () => {
            const total = parseFloat(document.getElementById("totalAmount").textContent);
            totalCobrarInput.value = total.toFixed(2);
            nombreClienteInput.value = "";
            tipoPagoSelect.value = "";
            plataformaPagoSelect.value = "";
            otraPlataformaContainer.style.display = "none";
            otraPlataformaInput.value = "";
            ventaModal.show();
        });

        // Confirmar venta
        confirmarVentaBtn.addEventListener("click", () => {
            const nombreCliente = nombreClienteInput.value.trim();
            const tipoPago = tipoPagoSelect.value;
            const plataformaPago = plataformaPagoSelect.value;
            const otraPlataforma = otraPlataformaInput.value;
            
            if (!tipoPago) {
                alert("Por favor seleccione un tipo de pago");
                return;
            }
            
            if (plataformaPago === "Otro" && !otraPlataforma) {
                alert("Por favor especifique la plataforma");
                return;
            }
            
            const plataformaCompleta = plataformaPago === "Otro" ? otraPlataforma : plataformaPago;
            const productosSeleccionados = JSON.parse(localStorage.getItem('productosSeleccionados')) || [];
            const total = parseFloat(totalCobrarInput.value);
            
            // Crear objeto venta
            const venta = {
                fecha: new Date().toISOString(),
                cliente: nombreCliente || "Sin nombre",
                tipoPago: tipoPago,
                plataforma: plataformaCompleta || "Local",
                total: total,
                productos: productosSeleccionados.map(item => ({
                    id: item.producto.id,
                    nombre: item.producto.nombre,
                    precioUnitario: parseFloat(item.producto.precio),
                    cantidad: item.cantidad
                }))
            };
            
            // Guardar venta
            guardarVenta(venta);
            
            // Limpiar productos seleccionados
            localStorage.removeItem('productosSeleccionados');
            actualizarEstadoVenta();
            
            ventaModal.hide();
            alert("Venta registrada exitosamente!");
        });

        function guardarVenta(venta) {
            let ventas = JSON.parse(localStorage.getItem('ventas')) || [];
            ventas.push(venta);
            localStorage.setItem('ventas', JSON.stringify(ventas));
        }

        // Cargar estado inicial
        actualizarEstadoVenta();
    });
</script>