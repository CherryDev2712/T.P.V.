<div class="sidebar">
    <h4 class="text-center">Productos Seleccionados <svg xmlns="http://www.w3.org/2000/svg" width="35" height="35" fill="currentColor" class="bi bi-cart-check" viewBox="0 0 16 16">
        <path d="M11.354 6.354a.5.5 0 0 0-.708-.708L8 8.293 6.854 7.146a.5.5 0 1 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0z"/>
        <path d="M.5 1a.5.5 0 0 0 0 1h1.11l.401 1.607 1.498 7.985A.5.5 0 0 0 4 12h1a2 2 0 1 0 0 4 2 2 0 0 0 0-4h7a2 2 0 1 0 0 4 2 2 0 0 0 0-4h1a.5.5 0 0 0 .491-.408l1.5-8A.5.5 0 0 0 14.5 3H2.89l-.405-1.621A.5.5 0 0 0 2 1zm3.915 10L3.102 4h10.796l-1.313 7zM6 14a1 1 0 1 1-2 0 1 1 0 0 1 2 0m7 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0"/>
      </svg></h4>
    <hr>
    <div class="table-responsive">
        <table class="table table-dark table-hover" id="selectedProductsTable">
            <thead>
                <tr>
                    <th>Producto</th>
                    <th>Precio</th>
                    <th>Cantidad</th>
                    <th>Subtotal</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody id="selectedProducts">
                <!-- Los productos se cargarán dinámicamente -->
                <tr id="emptyMessage" style="display: none;">
                    <td colspan="5" class="text-center">No hay productos seleccionados</td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="sidebar-footer">
        <hr>
        <div class="total-section">
            <h5>Total: $<span id="totalAmount">0.00</span></h5>
            <button id="finalizarVentaBtn" class="btn btn-success w-100 mt-2" disabled data-bs-toggle="modal" data-bs-target="#ventaModal">Finalizar Venta</button>
        </div>
    </div>
</div>

<!-- Modal de confirmación de venta -->
<div class="modal fade" id="ventaModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmar Venta</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Total a cobrar:</label>
                    <input type="text" class="form-control" id="totalCobrar" readonly>
                </div>
                
                <div class="mb-3">
                    <label for="nombreCliente" class="form-label">Nombre del Cliente:</label>
                    <input type="text" class="form-control" id="nombreCliente" placeholder="Opcional">
                </div>
                
                <div class="mb-3">
                    <label for="tipoPago" class="form-label">Tipo de Pago:</label>
                    <select class="form-select" id="tipoPago" required>
                        <option value="" selected disabled>Seleccione tipo de pago...</option>
                        <option value="Efectivo">Efectivo</option>
                        <option value="Tarjeta Débito">Tarjeta Débito</option>
                        <option value="Tarjeta Crédito">Tarjeta Crédito</option>
                        <option value="Transferencia">Transferencia</option>
                        <option value="Otro">Otro</option>
                    </select>
                </div>
                
                <div class="mb-3">
                    <label for="plataformaPago" class="form-label">Plataforma:</label>
                    <select class="form-select" id="plataformaPago">
                        <option value="" selected>Ninguna (para ventas locales)</option>
                        <option value="Uber">Uber</option>
                        <option value="Didi">Didi</option>
                        <option value="Rappi">Rappi</option>
                        <option value="Otro">Otra plataforma</option>
                    </select>
                </div>
                <div class="mb-3" id="otraPlataformaContainer" style="display: none;">
                    <label for="otraPlataforma" class="form-label">Especifique plataforma:</label>
                    <input type="text" class="form-control" id="otraPlataforma">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="confirmarVentaBtn">Registrar Venta</button>
            </div>
        </div>
    </div>
</div>

<style>
.sidebar {
    width: 350px;
    background: #2c3e50;
    color: white;
    padding: 15px;
    height: calc(100vh - 56px); /* Altura ajustada para compensar el margen superior */
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    position: fixed;
    right: 0;
    top: 56px; /* Ajusta la posición para que comience después del margen */
    z-index: 1000;
}

.table-responsive {
    flex-grow: 1;
    overflow-y: auto;
    margin: 15px 0;
}

.table {
    color: white;
    margin-bottom: 0;
}

.table th {
    border-top: none;
    font-weight: 500;
    padding: 10px;
}

.table td {
    vertical-align: middle;
    padding: 10px;
}

.table-hover tbody tr:hover {
    background-color: #3d5166;
}

.quantity-controls {
    display: flex;
    align-items: center;
    gap: 5px;
}

.quantity-controls button {
    width: 25px;
    height: 25px;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
}

.btn-eliminar {
    background-color: #dc3545;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 4px;
    cursor: pointer;
}

.btn-eliminar:hover {
    background-color: #c82333;
}

.sidebar-footer {
    margin-top: auto;
}

.total-section {
    padding: 10px;
    background: #34495e;
    border-radius: 5px;
    text-align: right;
}

#finalizarVentaBtn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

/* Responsive para móviles */
@media (max-width: 810px) {
    .sidebar {
        width: 100%;
        height: auto;
        max-height: 50vh;
        bottom: 0;
        top: auto;
        left: 0;
        border-top: 2px solid #34495e;
    }
    
    .main-container {
        padding-bottom: 50vh;
    }
    
    .table th, .table td {
        padding: 8px;
        font-size: 0.9rem;
    }
}

/* Animación para nuevos productos */
@keyframes highlight {
    0% { background-color: rgba(40, 167, 69, 0.7); }
    100% { background-color: transparent; }
}

.new-product {
    animation: highlight 1s ease;
}
</style>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const selectedProductsContainer = document.getElementById("selectedProducts");
        const finalizarVentaBtn = document.getElementById("finalizarVentaBtn");
        const emptyMessage = document.getElementById("emptyMessage");

        // Cargar productos al iniciar
        actualizarTablaProductos();

        // Eventos de delegación para controles dinámicos
        selectedProductsContainer.addEventListener("click", (e) => {
            const row = e.target.closest("tr[data-id]");
            if (!row) return;
            
            const productId = row.dataset.id;
            
            if (e.target.classList.contains("increment")) {
                actualizarCantidad(productId, 1);
            } else if (e.target.classList.contains("decrement")) {
                actualizarCantidad(productId, -1);
            } else if (e.target.classList.contains("btn-eliminar")) {
                eliminarProducto(productId);
            }
        });

        // Evento para finalizar venta
        document.getElementById("confirmarVentaBtn").addEventListener("click", finalizarVenta);

        function actualizarTablaProductos() {
            const productos = JSON.parse(localStorage.getItem('productosSeleccionados')) || [];
            selectedProductsContainer.innerHTML = '';
            
            if (productos.length === 0) {
                emptyMessage.style.display = 'table-row';
                finalizarVentaBtn.disabled = true;
                return;
            }
            
            emptyMessage.style.display = 'none';
            finalizarVentaBtn.disabled = false;

            productos.forEach(item => {
                const tr = document.createElement("tr");
                tr.dataset.id = item.producto.id;
                tr.innerHTML = `
                    <td>${item.producto.nombre}</td>
                    <td>$${item.producto.precio.toFixed(2)}</td>
                    <td>
                        <div class="quantity-controls">
                            <button class="btn btn-sm btn-outline-secondary decrement">-</button>
                            <span class="quantity-value">${item.cantidad}</span>
                            <button class="btn btn-sm btn-outline-secondary increment">+</button>
                        </div>
                    </td>
                    <td>$${(item.producto.precio * item.cantidad).toFixed(2)}</td>
                    <td><button class="btn-eliminar" data-id="${item.producto.id}">×</button></td>
                `;
                selectedProductsContainer.appendChild(tr);
            });

            actualizarTotal();
        }

        function actualizarCantidad(productId, cambio) {
            let productos = JSON.parse(localStorage.getItem('productosSeleccionados')) || [];
            const index = productos.findIndex(item => item.producto.id == productId);
            
            if (index >= 0) {
                productos[index].cantidad += cambio;
                
                if (productos[index].cantidad < 1) {
                    productos.splice(index, 1);
                }
                
                localStorage.setItem('productosSeleccionados', JSON.stringify(productos));
                actualizarTablaProductos();
            }
        }

        function eliminarProducto(productId) {
            let productos = JSON.parse(localStorage.getItem('productosSeleccionados')) || [];
            productos = productos.filter(item => item.producto.id != productId);
            localStorage.setItem('productosSeleccionados', JSON.stringify(productos));
            actualizarTablaProductos();
        }

        function actualizarTotal() {
            const productos = JSON.parse(localStorage.getItem('productosSeleccionados')) || [];
            const total = productos.reduce((acc, item) => acc + (item.producto.precio * item.cantidad), 0);
            document.getElementById("totalAmount").textContent = total.toFixed(2);
            document.getElementById("totalCobrar").value = total.toFixed(2);
        }

        function finalizarVenta() {
            const venta = {
                fecha: new Date().toISOString(),
                cliente: document.getElementById("nombreCliente").value,
                tipoPago: document.getElementById("tipoPago").value,
                plataforma: document.getElementById("plataformaPago").value,
                total: parseFloat(document.getElementById("totalAmount").textContent),
                productos: JSON.parse(localStorage.getItem('productosSeleccionados'))
            };

            // Validación básica
            if (venta.productos.length === 0 || !venta.tipoPago) {
                alert('Debe seleccionar productos y un método de pago');
                return;
            }

            // Guardar en historial
            let ventas = JSON.parse(localStorage.getItem('ventas')) || [];
            ventas.push(venta);
            localStorage.setItem('ventas', JSON.stringify(ventas));

            // Limpiar datos
            localStorage.removeItem('productosSeleccionados');
            document.getElementById("nombreCliente").value = '';
            document.getElementById("tipoPago").value = '';
            document.getElementById("plataformaPago").value = '';
            
            actualizarTablaProductos();
            bootstrap.Modal.getInstance(document.getElementById('ventaModal')).hide();
            alert('Venta registrada correctamente');
        }

        // Actualizar cuando cambien los datos desde otras ventanas
        window.addEventListener('storage', () => {
            actualizarTablaProductos();
        });
    });
</script>